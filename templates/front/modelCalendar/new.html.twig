{% extends "base.html.twig" %}

{% block title %}Calenduret - Création calendrier{% endblock %}

{% block body %}
    <section class="new-calendar">
        <div class="container py-2 py-md-4 bg-white">
            <div class="row justify-content-center">
                <div class="col-12 p-4 px-md-5">
                    <div class="row">
                        <nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item"><a href="{{ path('home_user') }}">Mes calendriers</a></li>
                                <li class="breadcrumb-item active" aria-current="page">Création calendrier</li>
                            </ol>
                        </nav>
                    </div>
                    {{ form_start(form) }}
                    <div class="row">
                        <h1 class="mb-3 mt-4 mb-md-5 text-center">Création calendrier</h1>
                        <div class="mb-3 col-md-6">
                            {{ form_label(form.title, null, { 'label_attr': {'class': 'form-label'} }) }}
                            {{ form_widget(form.title, { 'attr': {'class': 'form-control'} }) }}
                            <div class="text-danger">
                                {{ form_errors(form.title) }}
                            </div>
                        </div>
                        <div class="mb-3 col-md-6">
                            <label class="form-label">Couleur * (bordure et interieur)</label>
                            <div class="colorpicker"></div>
                            <br/>
                            {{ form_widget(form.color, { 'attr': {'class': 'colorpicker'} }) }}
                            <div class="text-danger">
                                {{ form_errors(form.color) }}
                            </div>
                        </div>
                        <div class="mb-3 col-12">
                            {% set isRequiredFile = false %}
                            {% if model.path == null %}
                                {% set isRequiredFile = true %}
                            {% endif %}

                            {{ form_label(form.file, null, { 'label_attr': {'class': 'form-label'} }) }}
                            {{ form_widget(form.file, { 'attr': {'class': 'form-control upload-img', 'data-preview-target': '#preview', 'data-cropped-target': '#cropped-file', 'data-cropper-width': '130', 'data-cropper-height': '175'}, required: isRequiredFile }) }}
                            <div class="text-danger">
                                {{ form_errors(form.file) }}
                            </div>
                        </div>
                        <input id="cropped-file" name="cropped-file" type="hidden">
                        <div class="mb-3 col-12 d-flex flex-column">
                            {% if null == model.path %}
                                <img id="preview" alt="{{ model.title }}" src="https://via.placeholder.com/130x175" class="thumbnail img-responsive mt-2" width="130" height="175">
                            {% else %}
                                <img id="preview" alt="{{ model.title }}" src="{{ asset(model.path) }}" class="thumbnail img-responsive mt-2" width="130" height="175">
                            {% endif %}
                        </div>
                        <div class="col-12">
                            <button type="submit" class="btn-color-to-transparent small secondary mb-2 mt-3 w-100">Valider</button>
                        </div>
                    </div>
                    <div class="d-none">
                        {{ form_widget(form) }}
                    </div>
                    {{ form_end(form) }}
                </div>
            </div>
        </div>
    </section>
    
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            let upload = new Upload();
            upload.uploadAndCropPreview({
                input: ".upload-img",
            });

            const pickr = Pickr.create({
                el: '.colorpicker',
                theme: 'monolith',
                default: '#000',
                comparison: true,
                components: {
                    preview: true,
                    opacity: true,
                    hue: true,
                }
            });

            let colorInput = document.querySelector('#front_model_calendar_color');

            pickr.on("change", (color, instance) => {
                colorInput.value = color.toHEXA().toString();
                pickr.setColor(color.toHEXA().toString());
            });
        });
    </script>
{% endblock %}