{% extends 'base.html.twig' %}

{% block title %}Calenduret - Calendrier {{ calendar.modelCalendar.title }}{% endblock %}

{% block meta %}
    <meta name="description" content="Un calendrier conçu spécialement pour vous est disponible.">
	<meta property="og:image" content="{{ app.request.getSchemeAndHttpHost() ~ '/' ~ calendar.modelCalendar.path }}" />
{% endblock %}

{% block body %}
    <section class="show-calendar" style="background: url('{{ asset('build/images/background.jpg') }}')">
        <div class="d-none d-md-block black-filter"></div>
        <div class="container bg-white py-5">
            <div class="row justify-content-center">
                <div class="col-12">
                    <h1 class="my-2 text-center">{{ calendar.modelCalendar.title }}</h1>
                    <div class="row align-items-center px-2 py-4">
                        <div class="col-12">
                            <div class="calendar-view mx-auto">
                                <div class="calendar-container">
                                    <div id="calendar" class="calendar">
                                        <div class="calendar-bg" style="background-image: url('{{ asset(calendar.modelCalendar.path) }}')"></div>
                                        {% for box in calendar.boxes %}
                                            <div class="box {% if(box.isOpen) %}open{% endif %}" data-uuid="{{ box.uuid }}" style="left: {{ box.modelBox.coordX }}%; top: {{ box.modelBox.coordY }}%;">
                                                <div class="box-front">
                                                    <div class="model-box-number">
                                                        {{ box.modelBox.position }}
                                                    </div>
                                                </div>
                                                <div class="box-inside">
                                                    <div class="preview-button">
                                                        <button type="button" data-bs-toggle="modal" data-bs-target="#previewModal" data-bs-uuid="{{ box.modelBox.uuid }}">
                                                        {% if box.modelBox.type == 'audio' %}
                                                            <i class="fas fa-headphones fa-lg" style="color: #FFF;"></i>
                                                        {% elseif box.modelBox.type == 'video' %}
                                                            <i class="fas fa-play-circle fa-lg" style="color: #FFF;"></i>
                                                        {% elseif box.modelBox.type == 'image' %}
                                                            <i class="fas fa-image fa-lg" style="color: #FFF;"></i>
                                                        {% else %}
                                                            <i class="far fa-eye fa-lg" style="color: #FFF;"></i>
                                                        {% endif %}
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        {% endfor %}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Modals -->
    {% include "calendar/model_calendar/preview/_modalPreview.html.twig" %}


    <script>
        const options = {
            backgroundColor: 'null',
            logging: false,
        };

        //Modifie l'état d'une case en "ouvert" avec l'uuid
        function changeBoxStatus(url) {
            fetch(url, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
            })
                .then(response => response.ok ? response.json() : new Error('Impossible d\'ouvrir la case'))
                .then(data => {
                    console.log('Ouverture réussie');
                })
        }

        document.addEventListener("DOMContentLoaded", function() {

            let boxes = document.querySelectorAll('.box:not(.open)');

            boxes.forEach(function(box){
                box.addEventListener("click", function(event){
                    let calendarBackground = document.querySelector('.calendar-bg');
                    let calendarWidth = Math.round(calendarBackground.getBoundingClientRect().width);
                    let calendarHeight = Math.round(calendarBackground.getBoundingClientRect().height);
                                    
                    let options = {
                        x: parseInt(box.style.left) * calendarWidth / 100,
                        y: parseInt(box.style.top) * calendarHeight / 100,
                        width: 12 * calendarWidth / 100,
                        height: 12 * calendarHeight / 100,
                        scale: 1,
                    };
                    
                    let url = "{{ path('box_open', {uuid: 'blank_uuid'}) }}";
                    url = url.replace('blank_uuid', box.dataset.uuid);

                    changeBoxStatus(url);
    
                    html2canvas(calendarBackground, options).then(function(canvas) {
                        let boxFront = box.querySelector('.box-front');
                        if(boxFront != undefined) {
                            boxFront.style.backgroundImage = "url(" + canvas.toDataURL() + ")";
                        }

                        box.classList.add('open');

                        let boxInside = box.querySelector('.box-inside');

                        if(boxInside != undefined){
                            boxInside.style.background = "{{ calendar.modelCalendar.color }}";
                        }
                    });

                })

            });
        })
    </script>

    <style>
        .calendar::after{
            position: absolute;
            content: "";
            left: 100%;
            margin: auto;
            width: 10px;
            height: 100%;
            background: linear-gradient(to left, {{ calendar.modelCalendar.color }}50, {{ calendar.modelCalendar.color }});
            clip-path: polygon(0px 0px, 100% 6px, 100% 99%, 0px 100%);
        }

        .box.open .box-inside{
            background-color: {{ calendar.modelCalendar.color }};
            box-shadow: inset 1px 0px 0px 8px rgba(0, 0, 0, 0.2);
        }
    </style>
{% endblock %}
